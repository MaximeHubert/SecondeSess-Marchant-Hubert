//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicWPF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFilm", ReplyAction="http://tempuri.org/IService1/AddFilmResponse")]
        void AddFilm(DTO.Film film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFilm", ReplyAction="http://tempuri.org/IService1/AddFilmResponse")]
        System.Threading.Tasks.Task AddFilmAsync(DTO.Film film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddComment", ReplyAction="http://tempuri.org/IService1/AddCommentResponse")]
        void AddComment(int idcom, string avatar, string text, int rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddComment", ReplyAction="http://tempuri.org/IService1/AddCommentResponse")]
        System.Threading.Tasks.Task AddCommentAsync(int idcom, string avatar, string text, int rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Recup5Film", ReplyAction="http://tempuri.org/IService1/Recup5FilmResponse")]
        DTO.Film[] Recup5Film();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Recup5Film", ReplyAction="http://tempuri.org/IService1/Recup5FilmResponse")]
        System.Threading.Tasks.Task<DTO.Film[]> Recup5FilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupFilmActor", ReplyAction="http://tempuri.org/IService1/RecupFilmActorResponse")]
        DTO.Film[] RecupFilmActor(long recherche);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupFilmActor", ReplyAction="http://tempuri.org/IService1/RecupFilmActorResponse")]
        System.Threading.Tasks.Task<DTO.Film[]> RecupFilmActorAsync(long recherche);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupRoleFilmActor", ReplyAction="http://tempuri.org/IService1/RecupRoleFilmActorResponse")]
        DTO.Character[] RecupRoleFilmActor(long idactor, long idfilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupRoleFilmActor", ReplyAction="http://tempuri.org/IService1/RecupRoleFilmActorResponse")]
        System.Threading.Tasks.Task<DTO.Character[]> RecupRoleFilmActorAsync(long idactor, long idfilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupFilmActorName", ReplyAction="http://tempuri.org/IService1/RecupFilmActorNameResponse")]
        DTO.Film[] RecupFilmActorName(string rechercheactor, int max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupFilmActorName", ReplyAction="http://tempuri.org/IService1/RecupFilmActorNameResponse")]
        System.Threading.Tasks.Task<DTO.Film[]> RecupFilmActorNameAsync(string rechercheactor, int max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecuptopFilm", ReplyAction="http://tempuri.org/IService1/RecuptopFilmResponse")]
        DTO.Film[] RecuptopFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecuptopFilm", ReplyAction="http://tempuri.org/IService1/RecuptopFilmResponse")]
        System.Threading.Tasks.Task<DTO.Film[]> RecuptopFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupAllActor", ReplyAction="http://tempuri.org/IService1/RecupAllActorResponse")]
        DTO.FullActor RecupAllActor(long idall);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupAllActor", ReplyAction="http://tempuri.org/IService1/RecupAllActorResponse")]
        System.Threading.Tasks.Task<DTO.FullActor> RecupAllActorAsync(long idall);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupActorByPage", ReplyAction="http://tempuri.org/IService1/RecupActorByPageResponse")]
        DTO.Actor[] RecupActorByPage(int numPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupActorByPage", ReplyAction="http://tempuri.org/IService1/RecupActorByPageResponse")]
        System.Threading.Tasks.Task<DTO.Actor[]> RecupActorByPageAsync(int numPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupActorByResearch", ReplyAction="http://tempuri.org/IService1/RecupActorByResearchResponse")]
        DTO.Actor[] RecupActorByResearch(int numPage, string recherche);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecupActorByResearch", ReplyAction="http://tempuri.org/IService1/RecupActorByResearchResponse")]
        System.Threading.Tasks.Task<DTO.Actor[]> RecupActorByResearchAsync(int numPage, string recherche);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ApplicWPF.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ApplicWPF.ServiceReference1.IService1>, ApplicWPF.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddFilm(DTO.Film film) {
            base.Channel.AddFilm(film);
        }
        
        public System.Threading.Tasks.Task AddFilmAsync(DTO.Film film) {
            return base.Channel.AddFilmAsync(film);
        }
        
        public void AddComment(int idcom, string avatar, string text, int rate) {
            base.Channel.AddComment(idcom, avatar, text, rate);
        }
        
        public System.Threading.Tasks.Task AddCommentAsync(int idcom, string avatar, string text, int rate) {
            return base.Channel.AddCommentAsync(idcom, avatar, text, rate);
        }
        
        public DTO.Film[] Recup5Film() {
            return base.Channel.Recup5Film();
        }
        
        public System.Threading.Tasks.Task<DTO.Film[]> Recup5FilmAsync() {
            return base.Channel.Recup5FilmAsync();
        }
        
        public DTO.Film[] RecupFilmActor(long recherche) {
            return base.Channel.RecupFilmActor(recherche);
        }
        
        public System.Threading.Tasks.Task<DTO.Film[]> RecupFilmActorAsync(long recherche) {
            return base.Channel.RecupFilmActorAsync(recherche);
        }
        
        public DTO.Character[] RecupRoleFilmActor(long idactor, long idfilm) {
            return base.Channel.RecupRoleFilmActor(idactor, idfilm);
        }
        
        public System.Threading.Tasks.Task<DTO.Character[]> RecupRoleFilmActorAsync(long idactor, long idfilm) {
            return base.Channel.RecupRoleFilmActorAsync(idactor, idfilm);
        }
        
        public DTO.Film[] RecupFilmActorName(string rechercheactor, int max) {
            return base.Channel.RecupFilmActorName(rechercheactor, max);
        }
        
        public System.Threading.Tasks.Task<DTO.Film[]> RecupFilmActorNameAsync(string rechercheactor, int max) {
            return base.Channel.RecupFilmActorNameAsync(rechercheactor, max);
        }
        
        public DTO.Film[] RecuptopFilm() {
            return base.Channel.RecuptopFilm();
        }
        
        public System.Threading.Tasks.Task<DTO.Film[]> RecuptopFilmAsync() {
            return base.Channel.RecuptopFilmAsync();
        }
        
        public DTO.FullActor RecupAllActor(long idall) {
            return base.Channel.RecupAllActor(idall);
        }
        
        public System.Threading.Tasks.Task<DTO.FullActor> RecupAllActorAsync(long idall) {
            return base.Channel.RecupAllActorAsync(idall);
        }
        
        public DTO.Actor[] RecupActorByPage(int numPage) {
            return base.Channel.RecupActorByPage(numPage);
        }
        
        public System.Threading.Tasks.Task<DTO.Actor[]> RecupActorByPageAsync(int numPage) {
            return base.Channel.RecupActorByPageAsync(numPage);
        }
        
        public DTO.Actor[] RecupActorByResearch(int numPage, string recherche) {
            return base.Channel.RecupActorByResearch(numPage, recherche);
        }
        
        public System.Threading.Tasks.Task<DTO.Actor[]> RecupActorByResearchAsync(int numPage, string recherche) {
            return base.Channel.RecupActorByResearchAsync(numPage, recherche);
        }
    }
}
